import cv2
import mediapipe as mp
import serial
import time
from collections import deque
from threading import Thread, Lock
import queue


class SerialWriter:
    def __init__(self, port='COM3', baudrate=9600):
        try:
            self.serial = serial.Serial(port, baudrate, timeout=1)
            time.sleep(2)  # Wait for Arduino to reset
        except serial.SerialException as e:
            print(f"Failed to open serial port: {e}")
            raise
        self.queue = queue.Queue(maxsize=10)
        self.running = True
        self.thread = Thread(target=self._write_loop, daemon=True)
        self.thread.start()

    def _write_loop(self):
        while self.running:
            try:
                data = self.queue.get(timeout=0.1)
                if self.serial.is_open:
                    # Ensure data ends with newline
                    if not data.endswith('\n'):
                        data += '\n'
                    self.serial.write(data.encode())
                    self.serial.flush()  # Ensure data is sent
                    # Read any response from Arduino for debugging
                    response = self.serial.readline().decode().strip()
                    if response:
                        print(f"Arduino response: {response}")
                self.queue.task_done()
            except queue.Empty:
                continue
            except Exception as e:
                print(f"Serial Error: {e}")

    def write(self, x, y):
        try:
            # Get frame dimensions for reversal
            height = 480  # Based on camera settings
            width = 640  # Based on camera settings

            # Reverse coordinates
            reversed_x = width - x
            reversed_y = height - y

            # Format data as "X Y\n" where X and Y are integers
            data = f"{reversed_x} {reversed_y}\n"
            self.queue.put_nowait(data)
        except queue.Full:
            pass  # Skip frame if queue is full
        except Exception as e:
            print(f"Write Error: {e}")

    def close(self):
        self.running = False
        if hasattr(self, 'thread'):
            self.thread.join()
        if hasattr(self, 'serial'):
            self.serial.close()


class PoseTracker:
    def __init__(self):
        self.mp_pose = mp.solutions.pose
        self.pose = self.mp_pose.Pose(
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5,
            model_complexity=0
        )
        self.mp_drawing = mp.solutions.drawing_utils
        self.prev_coords = deque(maxlen=3)
        self.lock = Lock()

    def estimate_distance(self, landmarks, image_width):
        # Estimate distance based on shoulder width in pixels
        left_shoulder = landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER.value]
        right_shoulder = landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value]

        shoulder_width_pixels = abs((right_shoulder.x - left_shoulder.x) * image_width)

        # These values need adjustment based on your camera and setup
        max_width = 200  # When person is very close
        min_width = 80  # When person is far away

        distance_factor = 1 - ((shoulder_width_pixels - min_width) / (max_width - min_width))
        distance_factor = max(0, min(1, distance_factor))

        return distance_factor

    def process_frame(self, frame):
        try:
            image_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            results = self.pose.process(image_rgb)
            image = cv2.cvtColor(image_rgb, cv2.COLOR_RGB2BGR)

            if not results.pose_landmarks:
                return None, image

            image_height, image_width, _ = image.shape

            try:
                landmarks = results.pose_landmarks.landmark

                center_x = int((landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER.value].x +
                                landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value].x) * image_width / 2)
                center_y = int((landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER.value].y +
                                landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y) * image_height / 2)

                distance_factor = self.estimate_distance(landmarks, image_width)
                y_offset = int(distance_factor * 70)  # Adjust 40 based on testing
                center_y += y_offset

                self.mp_drawing.draw_landmarks(
                    image,
                    results.pose_landmarks,
                    self.mp_pose.POSE_CONNECTIONS)

                cv2.circle(image, (center_x, center_y), 5, (0, 255, 0), -1)

                cv2.putText(image, f"Distance: {distance_factor:.2f}", (10, 60),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

                return (center_x, center_y), image

            except Exception as e:
                print(f"Landmark processing error: {e}")
                return None, image

        except Exception as e:
            print(f"Frame processing error: {e}")
            return None, frame


def main():
    # Initialize camera
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open webcam")
        return

    # Set camera properties
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    cap.set(cv2.CAP_PROP_FPS, 30)
    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)

    # Initialize components
    try:
        serial_writer = SerialWriter()
        pose_tracker = PoseTracker()
    except Exception as e:
        print(f"Initialization error: {e}")
        return

    frame_count = 0
    last_time = time.time()

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Failed to grab frame")
                break

            frame_count += 1
            if frame_count % 2 != 0:  # Process every other frame
                continue

            # Process frame
            result = pose_tracker.process_frame(frame)
            if result is None:
                continue

            center, processed_frame = result

            if center is not None:
                x, y = center
                # Send coordinates to Arduino
                serial_writer.write(x, y)

            # Calculate and display FPS
            if frame_count % 30 == 0:
                current_time = time.time()
                fps = 30 / (current_time - last_time)
                last_time = current_time
                cv2.putText(processed_frame, f"FPS: {fps:.1f}", (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            # Show the video feed
            cv2.imshow("Pose Tracking", processed_frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    except Exception as e:
        print(f"Unexpected Error: {e}")

    finally:
        cap.release()
        cv2.destroyAllWindows()
        serial_writer.close()


if __name__ == "__main__":
    main()
